name: Deploy to Fly ðŸª°

concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}-${{ inputs.fly_app_name }}-${{ inputs.github_environment }}
  cancel-in-progress: true

on:
  workflow_call:
    outputs:
      app_name:
        value: ${{ jobs.deploy.outputs.app_name }}
        description: "The name of the deployed app"
      app_url:
        value: ${{ jobs.deploy.outputs.app_url }}
        description: "The url of the deployed app"
      app_normalized_name:
        value: ${{ jobs.deploy.outputs.app_normalized_name }}
        description: "The name of the deployed app"

    inputs:
      workspace_name:
        required: false
        type: string
        description: "The name of the workspace to deploy. This is used to find the folder of the workspace by searching name fields in all package.json files."
      fly_app_name:
        required: false
        type: string
        description: "The name of the fly app to deploy."
      github_environment:
        required: true
        type: string
        description: "The name of the github deployment environment to deploy"
      fly_config_file_path:
        required: false
        type: string
        description: "Relative workspace path of the fly config file. Defaults to './fly.toml'"
        default: "./fly.toml"
      fly_org:
        required: false
        default: ${{ vars.FLY_ORG }}
        type: string
        description: "The Fly Organization to deploy to"
      fly_consul_attach:
        required: false
        type: boolean
        description: "Whether to attach a consul cluster to the app. Defaults to false"
        default: false
      deploy_timeout_minutes:
        required: false
        type: number
        description: "The timeout for the deployment in minutes. Defaults to 20 minutes"
        default: 20
      needs_deploy:
        required: false
        description: "Whether to deploy the app or not. Defaults to true. You can use this to dynamically decided if the workspace needs to be deployed or not."
        type: boolean
        default: true

    secrets:
      fly_secrets:
        required: false
        description: "The secrets to import to the app, separated by newlines"
      fly_api_token:
        required: true
        description: "The Fly API token"

env:
  FLY_API_TOKEN: ${{ secrets.fly_api_token }}

jobs:
  deploy:
    if: ${{ inputs.needs_deploy }}
    name: "${{ inputs.github_environment }}"
    runs-on: ubuntu-latest
    outputs:
      app_name: ${{ steps.fly_deploy.outputs.app_name }}
      app_url: ${{ steps.fly_deploy.outputs.app_url }}
      app_normalized_name: ${{ steps.fly_deploy.outputs.app_normalized_name }}
    environment:
      name: ${{ inputs.github_environment }}
      url: ${{ steps.fly_deploy.outputs.app_url }}
    timeout-minutes: ${{ inputs.deploy_timeout_minutes }}
    env:
      #LOG_LEVEL: debug
      NO_COLOR: 1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: actions/checkout@v4
        with:
          repository: forge42dev/workflows
          ref: monorepo-matrix
          path: ".workflows"
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - id: fly_deploy
        run: |
          # Deploy the app to fly.io
          # import the scripts
          source .workflows/scripts/fly_deploy.sh

          workflow_secrets='${{ toJSON(secrets) }}'
          workflow_inputs='${{ toJSON(inputs) }}'
          workflow_context='{ "github": { "repository": "${{ github.repository }}", "event_name": "${{ github.event_name }}", "ref_name": "${{ github.ref_name }}", "ref_type": "${{ github.ref_type }}", "sha": "${{ github.sha }}", "event_number": "${{ github.event.number }}", "event_pull_request_head_sha": "${{ github.event.pull_request.head.sha }}" } }'
          prepare_vars "$workflow_inputs" "$workflow_context"



          ### DEPLOY scripts go here



          # Set the app url as an github output
          echo "::notice::app_url=$app_url"
          echo "app_url=$app_url" >> $GITHUB_OUTPUT
          echo "::endgroup::"

          echo "### Deployed ${{ inputs.app_name }} :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "App URL: $app_url" >> $GITHUB_STEP_SUMMARY
