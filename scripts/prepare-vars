#!/usr/bin/env bash
shopt -s globstar

group () { echo "::group::$1"; }
end_group () { echo "::endgroup::"; }
debug () { echo "::debug::$1"; }
notice () { echo "::notice::$1"; }
warning () { echo "::warning::$1"; }
error () { echo "::error::$1"; }

function prepare_vars () {
  group "Prepare variables needed for deployment"

  # The function expects a json string as input, e.g. '{"foo": "bar", "hello": "world"}'.
  # It will set the local variables with the same name as the json keys, e.g. 'local inputs_foo="bar"'
  # This allows you to process the 'inputs_*' variables first, then set them in the global scope of the script.
  local inputs_vars=$(echo "$1" | jq -r 'to_entries | map("local inputs_\(.key)=\(.value);") | .[]')
  eval "$inputs_vars"
  debug "$inputs_vars"

  local prepped_github_context_vars=$(echo "$2" | jq -r '.github | paths(scalars) as $p | [($p|map(tostring)|join("_")), getpath($p)] | { (.[0]): .[1] }' | jq -s 'add')
  local github_context_vars=$(echo "$prepped_github_context_vars" | jq -r '. | to_entries | map("local github_\(.key)=\(.value);") | .[]')
  eval "$github_context_vars"
  debug "$github_context_vars"

  if [[ -z "$inputs_workspace_name" ]]; then
    debug "workspace_name not set. Using current directory as workspace_path and 'name' from ./package.json as workspace_name"
    workspace_path_relative="."
    workspace_path="$(pwd)"
    workspace_name="$(jq -rS '.name' ./package.json)"
  else
    local found_workspace="$(grep -rls "\"name\":.*\"$inputs_workspace_name\"" **/package.json | xargs -I {} dirname {})"
    if [[ -z "$found_workspace" ]]; then
      error "No workspace with name '$inputs_workspace_name' found."
      exit 1
    fi
    workspace_path_relative="$found_workspace"
    workspace_path="$(cd "$found_workspace" && pwd)"
    workspace_name="$inputs_workspace_name"
  fi

  debug "workspace_name=$workspace_name"
  debug "workspace_path=$workspace_path"
  debug "workspace_path_relative=$workspace_path_relative"

  if [[ "$github_event_name" == "pull_request" ]]; then
    local default_fly_app_name="${github_repository}-${workspace_name}-pr${github_event_number}"
  elif [[ "$github_event_name" == "push" || "$github_event_name" == "create" ]]; then
    local default_fly_app_name="${github_repository}-${workspace_name}-${github_ref_type}-${github_ref_name}"
  fi

  local raw_fly_app_name=${inputs_fly_app_name:-$default_fly_app_name}
  if [[ -z "$raw_fly_app_name" ]]; then
    error "Default for 'fly_app_name' could not be generated for github event '$github_event_name'. Please set 'fly_app_name' in the input."
    exit 1
  fi

  fly_app_name="$(echo $raw_fly_app_name | sed 's/[\.\/_]/-/g; s/[^a-zA-Z0-9-]//g' | tr '[:upper:]' '[:lower:]')"
  debug "fly_app_name=$fly_app_name"

  if [[ -z "$inputs_fly_config_file_path" ]]; then
    debug "fly_config_file_path NOT set. Using workspace_path='$workspace_path' and 'fly.toml' as default"
    local raw_fly_config_file_path="$workspace_path/fly.toml"
  else
    debug "fly_config_file_path set. Using workspace_path='$workspace_path' and '$inputs_fly_config_file_path' as default"
    local raw_fly_config_file_path="$workspace_path/$inputs_fly_config_file_path"
  fi

  fly_config_file_path="$(realpath -e "$raw_fly_config_file_path")"
  if [[ $? -ne 0 ]]; then
    error "Could not resolve fly_config_file_path: '$raw_fly_config_file_path'"
    exit 1
  fi
  debug "fly_config_file_path=$fly_config_file_path"

  if [ "$github_event_name" == "pull_request" ]; then
    git_commit_sha="$github_event_pull_request_head_sha"
  else
    git_commit_sha="$github_sha"
  fi
  debug "git_commit_sha=$git_commit_sha"

  git_commit_sha_short="$(git rev-parse --short $git_commit_sha)"
  debug "git_commit_sha_short=$git_commit_sha_short"

  end_group
}
